<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>eTorg</groupId>
  <artifactId>eTorg</artifactId>
  <version>1.0</version>
  <packaging>war</packaging>

	<!-- Shared version number properties -->
	<properties>
		<!-- springVersion>4.2.3.RELEASE</springVersion-->
		<!-- Must upgrade hibernate for Spring 5.. -->
		<springVersion>5.2.7.RELEASE</springVersion>
		<!--  hibernateVersion>4.3.11.Final</hibernateVersion-->
		<!--Hibernate 5 requires at least namingStrategy code to be changed-->
		<!--Different class is generated for postgres and mysql -->
		<hibernateVersion>5.2.16.Final</hibernateVersion>
		<logback.version>1.2.3</logback.version>
		<slf4j-api.version>1.7.25</slf4j-api.version>
	</properties>

	<build>
    	<!-- Version numbers in war file creates undeploy problem  using Tomcat admin console -->
    	<finalName>eTorg</finalName>
  		<plugins>
  			<!-- Compiler version -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.1</version>
				<configuration>
					<release>11</release>
				</configuration>
			</plugin>
			<!-- Need at least 2.22.0 to support JUnit 5 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>3.0.0-M3</version>
			</plugin>

			<!-- this plugin with configuration builds a jar and a war -->
			<!--  plugin>  
				<artifactId>maven-war-plugin</artifactId>  <version>2.1-beta-1</version>  
			    <configuration>  
			    	<attachClasses>true</attachClasses>  
			    </configuration> 
			</plugin-->  
			
			<!-- add Jetty support
  			<plugin>
  				<groupId>org.mortbay.jetty</groupId>
  				<artifactId>maven-jetty-plugin</artifactId>
  				<version>6.1.22</version>	
  			</plugin>
  		
  			<plugin>
        		<groupId>org.mortbay.jetty</groupId>
        		<artifactId>jetty-maven-plugin</artifactId>
        		<version>7.1.0.v20100505</version>
        		<configuration></configuration>
        	</plugin-->
  		
  		<!-- add Eclipse WTP support -->
        	<plugin>
            	<artifactId>maven-eclipse-plugin</artifactId>
            	<version>2.10</version>
        	</plugin>
        
  		</plugins>
  		
  		<!-- Eclipse WTP support (Web tools project) parameters -->
		<pluginManagement>
    		<plugins>
        		<plugin>
            		<artifactId>maven-eclipse-plugin</artifactId>
            		<configuration>
                		<wtpversion>2.0</wtpversion>
                		<wtpapplicationxml>true</wtpapplicationxml>
                		<wtpmanifest>true</wtpmanifest>
                		<downloadSources>true</downloadSources>
                		<downloadJavadocs>true</downloadJavadocs>
                		<projectNameTemplate>[artifactId]-[version]</projectNameTemplate>
                		<manifest>${basedir}/src/main/resources/META-INF/MANIFEST.MF</manifest>
            		</configuration>
        		</plugin>
    		</plugins>
		</pluginManagement>
		<!-- define resources (resources dir is default -->
	 	<resources>
	 		<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/main/images</directory>
			</resource>
		</resources>
  	</build>
  	
  	<!-- Add other repository, JSF 2.0 support cannot be found in central repository -->
  	<repositories>   
		<repository> 
    	<id>java.net</id>      
		<name>Java.net Repository for Maven</name> 
        <url>http://download.java.net/maven/2/</url> 
		</repository>
		
		<repository>
       		<id>repository.springsource.milestone</id>
      		<name>SpringSource Milestone Repository</name>
       		<url>http://repo.springsource.org/milestone</url>
     </repository> 
	</repositories>
	
	<dependencies>
	
		<!-- Option 1: Use if deploying to a Java EE application server (GlassFish, JBoss AS, etc
		
		<dependency>
			<groupId>javax.faces</groupId>
			<artifactId>jsf-api</artifactId>
			<version>2.0</version>
		</dependency-->
  		
  		<!-- Option 2: Use if deploying to a servlet container (Tomcat, Jetty, etc) -->
  		<!--  Oracle Mojarra JSF implementation -->
  		<!-- use provided if Apache Myfaces implementation is to be used on websphere server 
  		<dependency>
  			<groupId>com.sun.faces</groupId>
  			<artifactId>jsf-impl</artifactId>
  			<version>2.2.8-02</version>
  			<scope>compile</scope>
  		</dependency>
  		
  		<dependency>
  			<groupId>com.sun.faces</groupId>
  			<artifactId>jsf-api</artifactId>
  			<version>2.2.8-02</version>
  			<scope>compile</scope>
  		</dependency> -->
  		
  		<!-- apache myfaces JSF implementation -->
  		<dependency>
  			<groupId>org.apache.myfaces.core</groupId>
      		<artifactId>myfaces-api</artifactId>
      		<version>2.2.12</version>
      		<scope>compile</scope>
    	</dependency>
   		<dependency>
      		<groupId>org.apache.myfaces.core</groupId>
      		<artifactId>myfaces-impl</artifactId>
      		<version>2.2.12</version>
      		<scope>compile</scope>
    	</dependency>		
  	
  	    <!-- Actually provided for tomcat, according to doc
  	         but cannot be because it is needed in war file for the embedded JettyServer  -->
  		<dependency>
  			<groupId>javax.el</groupId>
  			<artifactId>el-api</artifactId>
  			<version>2.2</version>
  			<scope>compile</scope>
  		</dependency>
  		
  		<dependency>
  			<groupId>org.glassfish.web</groupId>
  			<artifactId>el-impl</artifactId>
  			<version>2.2</version>
  			<scope>runtime</scope>
  		</dependency>	  
		 
		<dependency>  
  			<groupId>javax.servlet.jsp</groupId>  
  			<artifactId>jsp-api</artifactId>  
  			<version>2.2</version>  
  			<scope>provided</scope>  
		</dependency>  
		
		<!-- -Spring -->
  		<dependency>  
			<groupId>org.springframework</groupId>  
			<artifactId>spring-core</artifactId>  
			<version>${springVersion}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>  
  		
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${springVersion}</version>
			<scope>compile</scope>
		</dependency>
  		
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${springVersion}</version>
			<scope>compile</scope>
		</dependency>
  		
  		<dependency>
  			<groupId>org.springframework</groupId>
  			<artifactId>spring-context-support</artifactId>
  			<version>${springVersion}</version>
  		</dependency>
  		
  		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-orm</artifactId>
			<version>${springVersion}</version>
		</dependency>
		
		<dependency>
    		<groupId>org.springframework.data</groupId>
   		 	<artifactId>spring-data-jpa</artifactId>
			<version>2.2.6.RELEASE</version>
 		 </dependency>
		
		<!--  spring cloud dependencies for manual configuration (1.1.0-RELEASE?)-->
		<dependency>
      		<groupId>org.springframework.cloud</groupId>
     		<artifactId>spring-cloud-spring-service-connector</artifactId>
    		<version>1.2.1.RELEASE</version>
    	</dependency>
    	<!--  seems not to be required for this version -->
    	<dependency>
    		<groupId>org.springframework.cloud</groupId>
    		<artifactId>spring-cloud-cloudfoundry-connector</artifactId>
    		<version>1.2.1.RELEASE</version>
  		</dependency>
 
  		
  		<!--  hibernate settings
		<dependency>
			<groupId>javax.persistence</groupId>
			<artifactId>persistence-api</artifactId>
			<version>1.0</version>
		</dependency> -->

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-core</artifactId>
			<version>${hibernateVersion}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-jpamodelgen</artifactId>
			<version>${hibernateVersion}</version>
			<scope>compile</scope>
		</dependency>
		
		<!-- c3p0 connection pool controlled by hibernate-->
		<dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-c3p0</artifactId>
			<version>${hibernateVersion}</version>
		</dependency>
		
		<!-- dependency>
			<groupId>org.hibernate</groupId>
			<artifactId>hibernate-annotations</artifactId>
			<version>${hibernateVersion}</version>
		</dependency-->
		
		
		<!-- MySQL database driver -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.49</version>
			<!-- version>8.0.16</version-->
			<!-- not compatible with mySQL 5.5 or order, so cannot be used on Oxxus-->
		</dependency>
		
		<!-- PostgresSQL database driver -->
		<dependency>
    		<groupId>org.postgresql</groupId>
    		<artifactId>postgresql</artifactId>
    		<!--  version>9.4-1200-jdbc41</version-->
    		<version>42.1.4</version>
		</dependency>
		
		<!-- DB2 driver 10.5 -->
		<!--  mvn install:install-file -Dfile=db2jcc.jar -DgroupId=com.ibm.db2 -DartifactId=db2jcc -Dversion=10.5 -Dpackaging=jar -DgeneratePom=true -->
		<dependency>
         	<groupId>com.ibm.db2</groupId>
         	<artifactId>db2jcc </artifactId>
         	<version>10.5</version>
 		</dependency>
		<!--As a replacement of the above db2 driver? Not tested -->
		<!--dependency>
			<groupId>com.ibm.db2.jcc</groupId>
			<artifactId>db2jcc</artifactId>
			<version>db2jcc4</version>
		</dependency-->
		<!-- Cannot find this jar anywhere in public repo's either -->
		<!--  mvn install:install-file -Dfile=nosqljson.jar -DgroupId=com.ibm.db2 -DartifactId=nosqljson -Dversion=1.0 -Dpackaging=jar -DgeneratePom=true -->
 		<dependency>
			<groupId>com.ibm.db2</groupId>
			<artifactId>nosqljson</artifactId>
			<version>1.0</version>
		</dependency>
		
		<dependency>
    		<groupId>com.h2database</groupId>
    		<artifactId>h2</artifactId>
    		<version>1.4.196</version>
		</dependency>
 
 		<!-- logging logback -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j-api.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.0</version>
		</dependency>

		<!-- primefaces -->
		<dependency>  
    		<groupId>org.primefaces</groupId>  
    		<artifactId>primefaces</artifactId>  
    		<version>6.1</version>  
		</dependency>

		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
			<version>5.5.2</version>
			<scope>test</scope>
		</dependency>
		<!-- junit -->
		<!--dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
			<scope>test</scope>
		</dependency-->
	</dependencies>
	
	
	
</project>